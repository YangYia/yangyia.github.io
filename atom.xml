<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨溢的博客</title>
  
  <subtitle>努力向上爬的小人物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-13T11:42:20.782Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YangYi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 组件间的样式污染</title>
    <link href="http://yoursite.com/2018/01/13/Vue-%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E6%A0%B7%E5%BC%8F%E6%B1%A1%E6%9F%93/"/>
    <id>http://yoursite.com/2018/01/13/Vue-组件间的样式污染/</id>
    <published>2018-01-13T11:17:23.025Z</published>
    <updated>2018-01-13T11:42:20.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、污染是如何产生的？"><a href="#一、污染是如何产生的？" class="headerlink" title="一、污染是如何产生的？"></a>一、污染是如何产生的？</h2><p>得益于 Vue-loader，在 Vue 中可以使用类似于 Web Component 的组件化写法,<code>&lt;template&gt;&lt;/template&gt;&lt;style&gt;&lt;/style&gt;&lt;script&gt;&lt;/script&gt;</code>，在大多数情况下，我们希望组件间定义的样式是相互隔离的，在 Weex 当中的确如此，组件天生隔离，可是在 Vue 当中，运行的载体还是浏览器，所有的样式类还是会通过 <style> 标签插入头部，影响全局，交叉污染</p><h2 id="二、增加-Scoped-标识"><a href="#二、增加-Scoped-标识" class="headerlink" title="二、增加 Scoped 标识"></a>二、增加 Scoped 标识</h2><p>依然是 Vue-loader，通过为组件中的 style 标签增加一个 scoped 标识，Vue-loader 在编译的过程中会为组件每一个元素节点增加 scopeId 作为属性，同时为所有的样式类加上属性选择器 scopeId，从而达到隔离的效果，大概是下面的样子：</p><p>`// 编译前</p><p><template><br>    <div class='bg'></div><br></template></p><style scoped>  .bg {      background: #000;      width: 100px;      height: 100px;  }</style></p><p>// 编译后</p><p><template><br>    <div class="bg" data-v-8e399fae=""></div><br></template></p><style>  .bg[data-v-8e399fae] {      background: #000;      width: 100px;      height: 100px;  }</style>`每个组件有唯一的 scopeId，按理说，这样应该能够做到样式隔离了，实际上，**这种方式其实表现已经足够好了，除了以下这种情况~~**## 三、ScopeId 的继承 ##我们把上面的例子再完善下：`// 父组件<template>    <div>        <div class="bg"></div>        <sub></sub>    </div></template><script>    import Sub from './sub';    export default {        components: { Sub }    };</script><style scoped>.bg {    background-color: #000;    width: 100px;    height: 100px;}</style><p>// 子组件</p><p><template><br>    <div class="bg"><br>    </div><br></template></p><p><script><br>    export default {<br>    };<br></script></p><style scoped>.bg {    width: 300px;    height: 300px;    margin-top: 5px;}</style><p>`<br>由于我们使用了 scoped 标识进行样式隔离，子组件的 div 不应该有任何背景颜色，可是现实总在狠狠的打脸~~</p><p><img src="/2018/01/13/Vue-组件间的样式污染/2954145-5ef559ae23a7aa98.png" alt=" "></p><p>不知道你的媚眼看到问题的所在了没：<br>子元素的<strong>根元素</strong>会继承父元素的 ScopeId！<br>子元素的<strong>根元素</strong>会继承父元素的 ScopeId！<br>子元素的<strong>根元素</strong>会继承父元素的 ScopeId！（说了三遍的话，肯定很重要）<br>由于子元素的<strong>根元素</strong>除了拥有自己的 ScopeId 属性，还继承了父元素的 ScopeId 属性，所以父元素的样式类 bg 对其依然有效</p><h2 id="四、怎么破？"><a href="#四、怎么破？" class="headerlink" title="四、怎么破？"></a>四、怎么破？</h2><p>破解的方式也很简单，为每一个组件的根元素提供一个另类一点的样式名（如果有的话），例如就不要每个组件都命名为：wrap，根据业务名为：b1-wrap、b2-wrap 等</p><blockquote><p>组件中的非根元素，类名不管怎么命名，怎么重名，都是不会发生污染的，这个自己领悟~~</p></blockquote><h2 id="五、【更新】这不是bug"><a href="#五、【更新】这不是bug" class="headerlink" title="五、【更新】这不是bug"></a>五、【更新】这不是bug</h2><p>惭愧，文档查得不够详实，实际上官网已经有：<br><a href="https://vue-loader.vuejs.org/en/features/scoped-css.html" target="_blank" rel="noopener">Be careful with descendant selectors in recursive components! For a CSS rule with the selector .a .b, if the element that matches .a contains a recursive child component, then all .b in that child component will be matched by the rule.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、污染是如何产生的？&quot;&gt;&lt;a href=&quot;#一、污染是如何产生的？&quot; class=&quot;headerlink&quot; title=&quot;一、污染是如何产生的？&quot;&gt;&lt;/a&gt;一、污染是如何产生的？&lt;/h2&gt;&lt;p&gt;得益于 Vue-loader，在 Vue 中可以使用类似于 Web 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>性能优化部分总结</title>
    <link href="http://yoursite.com/2018/01/13/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%83%A8%E5%88%86%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/01/13/性能优化部分总结/</id>
    <published>2018-01-13T11:06:45.498Z</published>
    <updated>2018-01-13T11:13:56.190Z</updated>
    
    <content type="html"><![CDATA[<p>1.Minimize HTTP Requests 减少http的请求</p><p>合并文件 雪碧图</p><p>2.Use a Content Delivery Network 利用CDN技术</p><p>CDN内容分发网络 必须有钱</p><p>把项目放在阿里云上，买一小块空间</p><p>3.Gzip Components Gzip压缩</p><p>减少了http请求的大小</p><p>自动化工具，边写代码边压缩</p><p>4.Put stylesheets at the top 把css放顶部</p><p>为了更快渲染页面</p><p>5.put script at the bottom 把js放底部</p><p>js阻塞加载，一条执行完才会执行另一条</p><p>自己的代码一般放顶部，别人的代码放底部</p><p>6.将css和js外链</p><p>7.Minify Javascript and css 减少js和css的体积</p><p>8.Avoid Redirect 避免重定向 每做一次重定向就是重新发送了一次请求</p><p>9.Remove Duplicate Scripts 删除重复的脚本</p><p>10.用get方式请求ajax，因为post要请求两次</p><p>11.Reduce the Number of DOM Elements 减少DOM元素数量 减少DOM操作，能用变量就用变量</p><p>12.No 404s 不要出现404页面</p><p>13.Reduce Cookie Size 减小cookie cookie特点：每次请求都有cookie</p><p>14.优化css，用雪碧图</p><p>15.不要在HTML中缩放图片 js重绘重排 css3只重绘</p><p>尽量使用css3的运动，减少重排</p><p>16.for-in 能用普通循环就用不for in循环(循环json和数组)</p><p>17.功能越强大消耗的性能就越高，所以能用Math.floor就不用parseInt，parseInt能字符串转数字，也取整</p><p>执行的性能：</p><p>1.少用定时器 打开另一个网页的时候 浏览器会改动定时器</p><p>2.尽量少操作DOM</p><p>3.多用变量(声明变量的时候尽量都写在最前面)，预加载</p><p>4.尽量能用正则的就不用字符串方法(正则是操作字符串的底层语言)</p><p>5.闭包(没用的子函数，释放掉)</p><p>性能优化的题：斐波那契数列又称兔子数列，一般解题是</p><pre><code>function fn(n){if(n&lt;=2){return fn(n-1)+fn(n-2);｝</code></pre><p>alert();括号里填想算的数字，这类方法是自己调用自己，递归，本身非常快，但咱们的重复的计算太多了，所以算的数越大时间越长。</p><p>所以我们通过吧递归转化为非递归求解的方式，用一个数组存储重复的数据，算出的速度就大大提高了。</p><pre><code>var arr=[];function fn(n){if(n&lt;=2){return 1;}else{if(arr[n]){return arr[n];}else{arr[n]=fn(n-1)+fn(n-2);return arr[n];}}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.Minimize HTTP Requests 减少http的请求&lt;/p&gt;
&lt;p&gt;合并文件 雪碧图&lt;/p&gt;
&lt;p&gt;2.Use a Content Delivery Network 利用CDN技术&lt;/p&gt;
&lt;p&gt;CDN内容分发网络 必须有钱&lt;/p&gt;
&lt;p&gt;把项目放在阿里云上
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Canvas基础知识</title>
    <link href="http://yoursite.com/2017/12/29/canvas%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2017/12/29/canvas基础知识/</id>
    <published>2017-12-29T05:39:33.143Z</published>
    <updated>2017-12-29T06:28:47.433Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas画布是HTML5的特性，可以制作动画、游戏；<br>手册文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial</a></p><h2 id="放置一个canvas标签"><a href="#放置一个canvas标签" class="headerlink" title="放置一个canvas标签"></a>放置一个canvas标签</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        canvas{            border:1px solid #333;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;canvas id=&quot;mycanvas&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>注意，千万不要用css来设置width、height，应该使用canvas标签的属性。</p><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    //得到节点    var mycanvas = document.getElementById(&quot;mycanvas&quot;);    //得到上下文    var ctx = mycanvas.getContext(&quot;2d&quot;);    //绘制一个矩形    ctx.fillStyle = &quot;blue&quot;;    ctx.fillRect(100 , 100 , 180 , 60);    //绘制一个圆形    ctx.fillStyle = &quot;gold&quot;;    ctx.beginPath();    ctx.arc(390 , 190 , 110 , 0 , Math.PI * 2 , true);    ctx.fill();    ctx.strokeStyle = &quot;red&quot;;    ctx.lineWidth = 10;    ctx.stroke();    ctx.closePath();&lt;/script&gt;</code></pre><h2 id="所有的属性语句，都是进行一些配置"><a href="#所有的属性语句，都是进行一些配置" class="headerlink" title="所有的属性语句，都是进行一些配置"></a>所有的属性语句，都是进行一些配置</h2><pre><code>ctx.fillStyle = &quot;blue&quot;;...ctx.fillStyle = &quot;gold&quot;;....ctx.strokeStyle = &quot;red&quot;;....ctx.lineWidth = 10;</code></pre><h2 id="所有的方法语句，都是在执行“动令”"><a href="#所有的方法语句，都是在执行“动令”" class="headerlink" title="所有的方法语句，都是在执行“动令”"></a>所有的方法语句，都是在执行“动令”</h2><pre><code>ctx.fillRect(100 , 100 , 180 , 60);....ctx.arc(390 , 190 , 110 , 0 , Math.PI * 2 , true);........ctx.fill();...ctx.stroke();</code></pre><p>canvas的API确实很简单，常用的属性和方法加起来只有16个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Canvas画布是HTML5的特性，可以制作动画、游戏；&lt;br&gt;手册文档：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
